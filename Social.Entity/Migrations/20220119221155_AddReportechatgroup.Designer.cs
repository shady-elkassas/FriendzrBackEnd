// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Social.Entity.DBContext;

namespace Social.Entity.Migrations
{
    [DbContext(typeof(AuthDBContext))]
    [Migration("20220119221155_AddReportechatgroup")]
    partial class AddReportechatgroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Social.Entity.Models.AppConfigration", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AgeFiltering_Max")
                        .HasColumnType("int");

                    b.Property<int?>("AgeFiltering_Min")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceFiltering_Max")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceFiltering_Min")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceShowNearbyAccountsInFeed_Max")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceShowNearbyAccountsInFeed_Min")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceShowNearbyEventsOnMap_Max")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceShowNearbyEventsOnMap_Min")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceShowNearbyEvents_Max")
                        .HasColumnType("int");

                    b.Property<int?>("DistanceShowNearbyEvents_Min")
                        .HasColumnType("int");

                    b.Property<int?>("EventCreationLimitNumber_MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("EventCreationLimitNumber_MinLength")
                        .HasColumnType("int");

                    b.Property<int?>("EventDetailsDescription_MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("EventDetailsDescription_MinLength")
                        .HasColumnType("int");

                    b.Property<double?>("EventTimeValidation_MaxLength")
                        .HasColumnType("float");

                    b.Property<double?>("EventTimeValidation_MinLength")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Password_MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("Password_MaxNumbers")
                        .HasColumnType("int");

                    b.Property<int?>("Password_MaxSpecialCharacters")
                        .HasColumnType("int");

                    b.Property<int?>("Password_MinLength")
                        .HasColumnType("int");

                    b.Property<int?>("Password_MinNumbers")
                        .HasColumnType("int");

                    b.Property<int?>("Password_MinSpecialCharacters")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("UserBio_MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("UserBio_MinLength")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserMaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("UserMinAge")
                        .HasColumnType("int");

                    b.Property<int?>("UserName_MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("UserName_MinLength")
                        .HasColumnType("int");

                    b.Property<int?>("UserTagM_MaxNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UserTagM_MinNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("AppConfigrations");
                });

            modelBuilder.Entity("Social.Entity.Models.AppearanceTypes_UserDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppearanceTypeID")
                        .HasColumnType("int");

                    b.Property<int>("UserDetailsID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserDetailsID");

                    b.ToTable("AppearanceTypes_UserDetails");
                });

            modelBuilder.Entity("Social.Entity.Models.BWErrorLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Api")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExStackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerExMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerExStackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BWErrorLog");
                });

            modelBuilder.Entity("Social.Entity.Models.ChatGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("Social.Entity.Models.ChatGroupReport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportReasonID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ChatGroupID");

                    b.HasIndex("CreatedBy_UserID");

                    b.HasIndex("ReportReasonID");

                    b.ToTable("ChatGroupReports");
                });

            modelBuilder.Entity("Social.Entity.Models.ChatGroupSubscribers", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClearChatDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsAdminGroup")
                        .HasColumnType("int");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaveDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveGroup")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemovedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ChatGroupID");

                    b.HasIndex("UserID");

                    b.ToTable("ChatGroupSubscribers");
                });

            modelBuilder.Entity("Social.Entity.Models.DeletedUsersLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDetailsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DeletedUsersLogs");
                });

            modelBuilder.Entity("Social.Entity.Models.EventChatAttend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventDataid")
                        .HasColumnType("int");

                    b.Property<bool>("ISAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Jointime")
                        .HasColumnType("time");

                    b.Property<int?>("UserattendId")
                        .HasColumnType("int");

                    b.Property<bool>("delete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("deletechatDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("deletechattime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("deletedate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("delettime")
                        .HasColumnType("time");

                    b.Property<bool>("leave")
                        .HasColumnType("bit");

                    b.Property<bool>("leavechat")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("leaveeventDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("leaveeventtime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("leveeventchatDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("leveeventchattime")
                        .HasColumnType("time");

                    b.Property<bool>("muit")
                        .HasColumnType("bit");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("removefromevent")
                        .HasColumnType("bit");

                    b.Property<int>("stutus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventDataid");

                    b.HasIndex("UserattendId");

                    b.ToTable("EventChatAttend");
                });

            modelBuilder.Entity("Social.Entity.Models.EventColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<string>("crowdedcolor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emptycolor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("emptynumber")
                        .HasColumnType("int");

                    b.Property<string>("middlecolor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("middlenumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventColor");
                });

            modelBuilder.Entity("Social.Entity.Models.EventData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("allday")
                        .HasColumnType("bit");

                    b.Property<int?>("categorieId")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("eventdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("eventdateto")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("eventfrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("eventto")
                        .HasColumnType("time");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("totalnumbert")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("categorieId");

                    b.ToTable("EventData");
                });

            modelBuilder.Entity("Social.Entity.Models.EventReport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventDataID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportReasonID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy_UserID");

                    b.HasIndex("EventDataID");

                    b.HasIndex("ReportReasonID");

                    b.ToTable("EventReports");
                });

            modelBuilder.Entity("Social.Entity.Models.FireBaseDatamodel", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Action_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Messagetype")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("muit")
                        .HasColumnType("bit");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid");

                    b.ToTable("FireBaseDatamodel");
                });

            modelBuilder.Entity("Social.Entity.Models.Interests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSharedForAllUsers")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserID");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Social.Entity.Models.LinkAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkAccountname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkAccounturl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LinkAccount");
                });

            modelBuilder.Entity("Social.Entity.Models.LoggedinUser", b =>
                {
                    b.Property<int>("PrimaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PrimaryId");

                    b.HasIndex("UserId");

                    b.ToTable("LoggedinUser");
                });

            modelBuilder.Entity("Social.Entity.Models.Messagedata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ChatGroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EventChatAttendId")
                        .HasColumnType("int");

                    b.Property<string>("Messages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessagesAttached")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Messagesdate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Messagestime")
                        .HasColumnType("time");

                    b.Property<int>("Messagetype")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserMessagessId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatGroupID");

                    b.HasIndex("EventChatAttendId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserMessagessId");

                    b.ToTable("Messagedata");
                });

            modelBuilder.Entity("Social.Entity.Models.ReportReason", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ReportReasons");
                });

            modelBuilder.Entity("Social.Entity.Models.Requestes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("UserblockId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("blockDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("regestdata")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRequestId");

                    b.HasIndex("UserblockId");

                    b.ToTable("Requestes");
                });

            modelBuilder.Entity("Social.Entity.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EmailConfirmedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserloginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logintypevalue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Social.Entity.Models.UserCodeCheck", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserCodeCheck");
                });

            modelBuilder.Entity("Social.Entity.Models.UserDetails", b =>
                {
                    b.Property<int>("PrimaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FcmToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Filteringaccordingtoage")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Manualdistancecontrol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OtherGenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("agefrom")
                        .HasColumnType("int");

                    b.Property<int>("ageto")
                        .HasColumnType("int");

                    b.Property<bool>("allowmylocation")
                        .HasColumnType("bit");

                    b.Property<string>("bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("distanceFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("ghostmode")
                        .HasColumnType("bit");

                    b.Property<string>("instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("logintype")
                        .HasColumnType("int");

                    b.Property<string>("pasword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("platform")
                        .HasColumnType("int");

                    b.Property<bool>("pushnotification")
                        .HasColumnType("bit");

                    b.Property<string>("snapchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userlogintypeid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrimaryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Social.Entity.Models.UserMessages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Todelete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tomuit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("UserdeleteTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("Userdeletedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("delete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("deleteTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("deletedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("muit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startedin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Social.Entity.Models.UserReport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportReasonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedBy_UserID");

                    b.HasIndex("ReportReasonID");

                    b.HasIndex("UserID");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("Social.Entity.Models.category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Social.Entity.Models.eventattend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventDataid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserattendId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("deletedate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deletefromeventDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("deletefromeventtime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("delettime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("leveeventchatDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("leveeventchattime")
                        .HasColumnType("time");

                    b.Property<bool>("muit")
                        .HasColumnType("bit");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stutus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventDataid");

                    b.HasIndex("UserattendId");

                    b.ToTable("eventattend");
                });

            modelBuilder.Entity("Social.Entity.Models.listoftags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterestsId")
                        .HasColumnType("int");

                    b.Property<string>("Tagsname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InterestsId");

                    b.HasIndex("UserId");

                    b.ToTable("listoftags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Social.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Social.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Social.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Social.Entity.Models.AppConfigration", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("AppConfigrations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Social.Entity.Models.AppearanceTypes_UserDetails", b =>
                {
                    b.HasOne("Social.Entity.Models.UserDetails", "UserDetails")
                        .WithMany("AppearanceTypes")
                        .HasForeignKey("UserDetailsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Social.Entity.Models.ChatGroup", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("ChatGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.ChatGroupReport", b =>
                {
                    b.HasOne("Social.Entity.Models.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupReports")
                        .HasForeignKey("ChatGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("ChatGroupReports")
                        .HasForeignKey("CreatedBy_UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.ReportReason", "ReportReason")
                        .WithMany("ChatGroupReports")
                        .HasForeignKey("ReportReasonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Social.Entity.Models.ChatGroupSubscribers", b =>
                {
                    b.HasOne("Social.Entity.Models.ChatGroup", "ChatGroup")
                        .WithMany("Subscribers")
                        .HasForeignKey("ChatGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("ChatGroupSubscribers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.EventChatAttend", b =>
                {
                    b.HasOne("Social.Entity.Models.EventData", "EventData")
                        .WithMany("EventChatAttend")
                        .HasForeignKey("EventDataid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.UserDetails", "Userattend")
                        .WithMany()
                        .HasForeignKey("UserattendId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.EventData", b =>
                {
                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("EventData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.category", "categorie")
                        .WithMany("EventData")
                        .HasForeignKey("categorieId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.EventReport", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("EventReports")
                        .HasForeignKey("CreatedBy_UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.EventData", "EventData")
                        .WithMany("EventReports")
                        .HasForeignKey("EventDataID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.ReportReason", "ReportReason")
                        .WithMany("EventReports")
                        .HasForeignKey("ReportReasonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Social.Entity.Models.FireBaseDatamodel", b =>
                {
                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("FireBaseDatamodel")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.Interests", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("Interests")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.LinkAccount", b =>
                {
                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("LinkAccount")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.LoggedinUser", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithMany("LoggedinUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.Messagedata", b =>
                {
                    b.HasOne("Social.Entity.Models.ChatGroup", "ChatGroup")
                        .WithMany("Messagedatas")
                        .HasForeignKey("ChatGroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.EventChatAttend", "EventChatAttend")
                        .WithMany("Messagedata")
                        .HasForeignKey("EventChatAttendId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("Messagedata")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.UserMessages", "UserMessagess")
                        .WithMany("Messagedata")
                        .HasForeignKey("UserMessagessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.Requestes", b =>
                {
                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("Requestesto")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.UserDetails", "UserRequest")
                        .WithMany("Requestesfor")
                        .HasForeignKey("UserRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.UserDetails", "Userblock")
                        .WithMany("Requestesblock")
                        .HasForeignKey("UserblockId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.UserDetails", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("Social.Entity.Models.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.UserMessages", b =>
                {
                    b.HasOne("Social.Entity.Models.UserDetails", "ToUser")
                        .WithMany("UserMessagesto")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Social.Entity.Models.UserReport", b =>
                {
                    b.HasOne("Social.Entity.Models.User", "CreatedBy_User")
                        .WithMany("UserReports_CreatedBy")
                        .HasForeignKey("CreatedBy_UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Social.Entity.Models.ReportReason", "ReportReason")
                        .WithMany("UserReports")
                        .HasForeignKey("ReportReasonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.User", "ReportedUser")
                        .WithMany("UserReports_Reported")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.eventattend", b =>
                {
                    b.HasOne("Social.Entity.Models.EventData", "EventData")
                        .WithMany("eventattend")
                        .HasForeignKey("EventDataid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.UserDetails", "Userattend")
                        .WithMany("eventattend")
                        .HasForeignKey("UserattendId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Social.Entity.Models.listoftags", b =>
                {
                    b.HasOne("Social.Entity.Models.Interests", "Interests")
                        .WithMany("listoftags")
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Social.Entity.Models.UserDetails", "User")
                        .WithMany("listoftags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
